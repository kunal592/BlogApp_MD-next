
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  coverImage    String?
  bio           String?   @db.Text
  role          Role      @default(USER)
  socialLink    String?   
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  comments      Comment[]
  blogLikes     BlogLike[]
  commentLikes  CommentLike[]
  bookmarks     Bookmark[]
  followers     Follow[]  @relation("followers")
  following     Follow[]  @relation("following")
  notifications Notification[] @relation("notificationsFor")
  sentNotifications Notification[] @relation("notificationsFrom")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.T ext
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Blog {
  id             String    @id @default(cuid())
  title          String
  excerpt        String?
  content        String    @db.Text
  image          String?
  tags           String[]
  status         String    @default("published") // "published", "draft"
  views          Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authorId       String
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments       Comment[]
  likes          BlogLike[]
  bookmarks      Bookmark[]
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  blogId      String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  parent      Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId    String?
  replies     Comment[] @relation("Replies")
  likes       CommentLike[]
}

model BlogLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  blogId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  commentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  blogId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followeeId  String
  follower    User     @relation(name: "followers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation(name: "following", fields: [followeeId], references: [id], onDelete: Cascade)

  @@unique([followerId, followeeId])
}

model Notification {
  id          String   @id @default(cuid())
  type        String   // "like", "comment", "follow"
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  fromUserId  String
  toUserId    String
  blogId      String?  // For likes and comments
  fromUser    User     @relation(name: "notificationsFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser      User     @relation(name: "notificationsFor", fields: [toUserId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String   @db.Text
  createdAt DateTime @default(now())
}
